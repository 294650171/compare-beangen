/*
 *  Copyright 2016-present Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.compare;

import java.time.LocalDate;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public final class JodaBeansPerson implements ImmutableBean {
  // NOTES
  // Requires runtime dependency on Joda-Beans
  // block generated within the class

  /**
   * The name of the person.
   */
  @PropertyDefinition(validate = "notNull")
  private final String name;

  /**
   * The date of birth.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate birthDate;

  /**
   * Creates an instance.
   * 
   * @param name  the name
   * @param birthDate  the date of birth
   * @return the person
   */
  public static JodaBeansPerson of(String name, LocalDate birthDate) {
    return new JodaBeansPerson(name, birthDate);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code JodaBeansPerson}.
   * @return the meta-bean, not null
   */
  public static JodaBeansPerson.Meta meta() {
    return JodaBeansPerson.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(JodaBeansPerson.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static JodaBeansPerson.Builder builder() {
    return new JodaBeansPerson.Builder();
  }

  private JodaBeansPerson(
      String name,
      LocalDate birthDate) {
    JodaBeanUtils.notNull(name, "name");
    JodaBeanUtils.notNull(birthDate, "birthDate");
    this.name = name;
    this.birthDate = birthDate;
  }

  @Override
  public JodaBeansPerson.Meta metaBean() {
    return JodaBeansPerson.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name of the person.
   * @return the value of the property, not null
   */
  public String getName() {
    return name;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the date of birth.
   * @return the value of the property, not null
   */
  public LocalDate getBirthDate() {
    return birthDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      JodaBeansPerson other = (JodaBeansPerson) obj;
      return JodaBeanUtils.equal(name, other.name) &&
          JodaBeanUtils.equal(birthDate, other.birthDate);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(name);
    hash = hash * 31 + JodaBeanUtils.hashCode(birthDate);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("JodaBeansPerson{");
    buf.append("name").append('=').append(name).append(',').append(' ');
    buf.append("birthDate").append('=').append(JodaBeanUtils.toString(birthDate));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code JodaBeansPerson}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> name = DirectMetaProperty.ofImmutable(
        this, "name", JodaBeansPerson.class, String.class);
    /**
     * The meta-property for the {@code birthDate} property.
     */
    private final MetaProperty<LocalDate> birthDate = DirectMetaProperty.ofImmutable(
        this, "birthDate", JodaBeansPerson.class, LocalDate.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "name",
        "birthDate");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return name;
        case -1210031859:  // birthDate
          return birthDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public JodaBeansPerson.Builder builder() {
      return new JodaBeansPerson.Builder();
    }

    @Override
    public Class<? extends JodaBeansPerson> beanType() {
      return JodaBeansPerson.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> name() {
      return name;
    }

    /**
     * The meta-property for the {@code birthDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> birthDate() {
      return birthDate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return ((JodaBeansPerson) bean).getName();
        case -1210031859:  // birthDate
          return ((JodaBeansPerson) bean).getBirthDate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code JodaBeansPerson}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<JodaBeansPerson> {

    private String name;
    private LocalDate birthDate;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(JodaBeansPerson beanToCopy) {
      this.name = beanToCopy.getName();
      this.birthDate = beanToCopy.getBirthDate();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return name;
        case -1210031859:  // birthDate
          return birthDate;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          this.name = (String) newValue;
          break;
        case -1210031859:  // birthDate
          this.birthDate = (LocalDate) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public JodaBeansPerson build() {
      return new JodaBeansPerson(
          name,
          birthDate);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the name of the person.
     * @param name  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder name(String name) {
      JodaBeanUtils.notNull(name, "name");
      this.name = name;
      return this;
    }

    /**
     * Sets the date of birth.
     * @param birthDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder birthDate(LocalDate birthDate) {
      JodaBeanUtils.notNull(birthDate, "birthDate");
      this.birthDate = birthDate;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("JodaBeansPerson.Builder{");
      buf.append("name").append('=').append(JodaBeanUtils.toString(name)).append(',').append(' ');
      buf.append("birthDate").append('=').append(JodaBeanUtils.toString(birthDate));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
