/*
 *  Copyright 2016-present Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.compare.list;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.compare.AutoValuePerson;

import com.google.common.collect.ImmutableList;

@BeanDefinition
public final class JodaBeansPeople implements ImmutableBean {
  // NOTES

  /**
   * The friends.
   */
  @PropertyDefinition(validate = "notNull")
  private final List<AutoValuePerson> friends;

  /**
   * The tags.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableList<String> tags;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code JodaBeansPeople}.
   * @return the meta-bean, not null
   */
  public static JodaBeansPeople.Meta meta() {
    return JodaBeansPeople.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(JodaBeansPeople.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static JodaBeansPeople.Builder builder() {
    return new JodaBeansPeople.Builder();
  }

  private JodaBeansPeople(
      List<AutoValuePerson> friends,
      List<String> tags) {
    JodaBeanUtils.notNull(friends, "friends");
    JodaBeanUtils.notNull(tags, "tags");
    this.friends = ImmutableList.copyOf(friends);
    this.tags = ImmutableList.copyOf(tags);
  }

  @Override
  public JodaBeansPeople.Meta metaBean() {
    return JodaBeansPeople.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the friends.
   * @return the value of the property, not null
   */
  public List<AutoValuePerson> getFriends() {
    return friends;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the tags.
   * @return the value of the property, not null
   */
  public ImmutableList<String> getTags() {
    return tags;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      JodaBeansPeople other = (JodaBeansPeople) obj;
      return JodaBeanUtils.equal(friends, other.friends) &&
          JodaBeanUtils.equal(tags, other.tags);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(friends);
    hash = hash * 31 + JodaBeanUtils.hashCode(tags);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("JodaBeansPeople{");
    buf.append("friends").append('=').append(friends).append(',').append(' ');
    buf.append("tags").append('=').append(JodaBeanUtils.toString(tags));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code JodaBeansPeople}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code friends} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<AutoValuePerson>> friends = DirectMetaProperty.ofImmutable(
        this, "friends", JodaBeansPeople.class, (Class) List.class);
    /**
     * The meta-property for the {@code tags} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<String>> tags = DirectMetaProperty.ofImmutable(
        this, "tags", JodaBeansPeople.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "friends",
        "tags");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -600094315:  // friends
          return friends;
        case 3552281:  // tags
          return tags;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public JodaBeansPeople.Builder builder() {
      return new JodaBeansPeople.Builder();
    }

    @Override
    public Class<? extends JodaBeansPeople> beanType() {
      return JodaBeansPeople.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code friends} property.
     * @return the meta-property, not null
     */
    public MetaProperty<List<AutoValuePerson>> friends() {
      return friends;
    }

    /**
     * The meta-property for the {@code tags} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<String>> tags() {
      return tags;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -600094315:  // friends
          return ((JodaBeansPeople) bean).getFriends();
        case 3552281:  // tags
          return ((JodaBeansPeople) bean).getTags();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code JodaBeansPeople}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<JodaBeansPeople> {

    private List<AutoValuePerson> friends = ImmutableList.of();
    private List<String> tags = ImmutableList.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(JodaBeansPeople beanToCopy) {
      this.friends = ImmutableList.copyOf(beanToCopy.getFriends());
      this.tags = beanToCopy.getTags();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -600094315:  // friends
          return friends;
        case 3552281:  // tags
          return tags;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -600094315:  // friends
          this.friends = (List<AutoValuePerson>) newValue;
          break;
        case 3552281:  // tags
          this.tags = (List<String>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public JodaBeansPeople build() {
      return new JodaBeansPeople(
          friends,
          tags);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the friends.
     * @param friends  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder friends(List<AutoValuePerson> friends) {
      JodaBeanUtils.notNull(friends, "friends");
      this.friends = friends;
      return this;
    }

    /**
     * Sets the {@code friends} property in the builder
     * from an array of objects.
     * @param friends  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder friends(AutoValuePerson... friends) {
      return friends(ImmutableList.copyOf(friends));
    }

    /**
     * Sets the tags.
     * @param tags  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder tags(List<String> tags) {
      JodaBeanUtils.notNull(tags, "tags");
      this.tags = tags;
      return this;
    }

    /**
     * Sets the {@code tags} property in the builder
     * from an array of objects.
     * @param tags  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder tags(String... tags) {
      return tags(ImmutableList.copyOf(tags));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("JodaBeansPeople.Builder{");
      buf.append("friends").append('=').append(JodaBeanUtils.toString(friends)).append(',').append(' ');
      buf.append("tags").append('=').append(JodaBeanUtils.toString(tags));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
