/*
 *  Copyright 2016-present Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.compare.mutable;

import java.time.LocalDate;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class JodaBeansMutable implements Bean {
  // NOTES
  // Requires runtime dependency on Joda-Beans
  // block generated within the class

  /**
   * The name of the person.
   */
  @PropertyDefinition(validate = "notNull")
  private String name;

  /**
   * The date of birth.
   */
  @PropertyDefinition(validate = "notNull")
  private LocalDate birthDate;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code JodaBeansMutable}.
   * @return the meta-bean, not null
   */
  public static JodaBeansMutable.Meta meta() {
    return JodaBeansMutable.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(JodaBeansMutable.Meta.INSTANCE);
  }

  @Override
  public JodaBeansMutable.Meta metaBean() {
    return JodaBeansMutable.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name of the person.
   * @return the value of the property, not null
   */
  public String getName() {
    return name;
  }

  /**
   * Sets the name of the person.
   * @param name  the new value of the property, not null
   */
  public void setName(String name) {
    JodaBeanUtils.notNull(name, "name");
    this.name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the date of birth.
   * @return the value of the property, not null
   */
  public LocalDate getBirthDate() {
    return birthDate;
  }

  /**
   * Sets the date of birth.
   * @param birthDate  the new value of the property, not null
   */
  public void setBirthDate(LocalDate birthDate) {
    JodaBeanUtils.notNull(birthDate, "birthDate");
    this.birthDate = birthDate;
  }

  /**
   * Gets the the {@code birthDate} property.
   * @return the property, not null
   */
  public final Property<LocalDate> birthDate() {
    return metaBean().birthDate().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public JodaBeansMutable clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      JodaBeansMutable other = (JodaBeansMutable) obj;
      return JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getBirthDate(), other.getBirthDate());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getName());
    hash = hash * 31 + JodaBeanUtils.hashCode(getBirthDate());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("JodaBeansMutable{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
    buf.append("birthDate").append('=').append(JodaBeanUtils.toString(getBirthDate())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code JodaBeansMutable}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> name = DirectMetaProperty.ofReadWrite(
        this, "name", JodaBeansMutable.class, String.class);
    /**
     * The meta-property for the {@code birthDate} property.
     */
    private final MetaProperty<LocalDate> birthDate = DirectMetaProperty.ofReadWrite(
        this, "birthDate", JodaBeansMutable.class, LocalDate.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "name",
        "birthDate");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return name;
        case -1210031859:  // birthDate
          return birthDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends JodaBeansMutable> builder() {
      return new DirectBeanBuilder<JodaBeansMutable>(new JodaBeansMutable());
    }

    @Override
    public Class<? extends JodaBeansMutable> beanType() {
      return JodaBeansMutable.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return name;
    }

    /**
     * The meta-property for the {@code birthDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> birthDate() {
      return birthDate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return ((JodaBeansMutable) bean).getName();
        case -1210031859:  // birthDate
          return ((JodaBeansMutable) bean).getBirthDate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          ((JodaBeansMutable) bean).setName((String) newValue);
          return;
        case -1210031859:  // birthDate
          ((JodaBeansMutable) bean).setBirthDate((LocalDate) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((JodaBeansMutable) bean).name, "name");
      JodaBeanUtils.notNull(((JodaBeansMutable) bean).birthDate, "birthDate");
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
